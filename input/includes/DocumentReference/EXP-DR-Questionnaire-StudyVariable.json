{
  "resourceType": "DocumentReference",
  "id": "EXP-DR-Questionnaire-StudyVariable",
  "content": [
    {
      "attachment": {
        "contentType": "application/fhir+json",
        "data": "{
  "resourceType": "Parameters",
  "parameter": [
    {
      "name": "questionnaire",
      "resource": {
        "resourceType": "Questionnaire",
        "id": "Questionnaire-StudyVariable",
        "meta": {
          "profile": [
            "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-extr-defn"
          ]
        },
        "url": "https://flute.com/fhir/Questionnaire/Questionnaire-StudyVariable",
        "subjectType": [
          "Patient"
        ],
        "jurisdiction": [
          {
            "coding": [
              {
                "code": "001",
                "system": "http://unstats.un.org/unsd/methods/m49/m49.htm",
                "display": "World"
              }
            ]
          }
        ],
        "item": [
          {
            "item": [
              {
                "linkId": "patient",
                "definition": "https://flute.com/StructureDefinition/PR-Biopsy#Procedure.subject",
                "text": "Patient",
                "type": "reference",
                "required": true,
                "repeats": false
              },
              {
                "linkId": "type-of-biopsy",
                "definition": "https://flute.com/StructureDefinition/PR-Biopsy#Procedure.category.coding",
                "text": "Type of biopsy",
                "type": "choice",
                "required": true,
                "repeats": false,
                "answerValueSet": "https://flute.com/fhir/ValueSet/VS-BiopsyType"
              },
              {
                "code": [
                  {
                    "code": "86273004",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "initial": [
                  {
                    "valueCoding": {
                      "code": "completed",
                      "system": "http://hl7.org/fhir/event-status"
                    }
                  }
                ],
                "linkId": "procedure-status",
                "definition": "https://flute.com/StructureDefinition/PR-Biopsy#Procedure.status",
                "text": "Status",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "code": [
                  {
                    "code": "86273004",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "linkId": "age-at-biopsy",
                "definition": "https://flute.com/StructureDefinition/PR-Biopsy#Procedure.performed",
                "text": "Age at biopsy",
                "type": "quantity",
                "required": true,
                "repeats": false
              },
              {
                "initial": [
                  {
                    "valueCoding": {
                      "code": "86273004",
                      "system": "http://snomed.info/sct",
                      "display": "Biopsy"
                    }
                  }
                ],
                "linkId": "biopsy",
                "definition": "https://flute.com/StructureDefinition/PR-Biopsy#Procedure.code.coding",
                "text": "Biopsy",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "code": [
                  {
                    "code": "86273004",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "initial": [
                  {
                    "valueCoding": {
                      "code": "41216001",
                      "system": "http://snomed.info/sct",
                      "display": "Prostatic structure (body structure)"
                    }
                  }
                ],
                "linkId": "biopsy-bodySite",
                "definition": "https://flute.com/StructureDefinition/PR-Biopsy#Procedure.bodySite.coding",
                "text": "Biopsy bodySite",
                "type": "choice",
                "required": true,
                "repeats": false
              }
            ],
            "linkId": "procedure-group",
            "definition": "https://flute.com/StructureDefinition/PR-Biopsy#Procedure",
            "type": "group",
            "required": false
          },
          {
            "item": [
              {
                "code": [
                  {
                    "code": "399068003",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "linkId": "family-history-pca",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateCancerFamilyHistory#FamilyMemberHistory.condition.code.coding",
                "text": "Family history of prostate cancer",
                "type": "choice",
                "required": true,
                "repeats": false
              },
              {
                "code": [
                  {
                    "code": "399068003",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "initial": [
                  {
                    "valueCoding": {
                      "code": "completed",
                      "system": "http://hl7.org/fhir/history-status"
                    }
                  }
                ],
                "linkId": "family-status",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateCancerFamilyHistory#FamilyMemberHistory.status",
                "text": "Family Status",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "code": [
                  {
                    "code": "399068003",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "linkId": "family-patient",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateCancerFamilyHistory#FamilyMemberHistory.patient",
                "text": "Family Patient",
                "type": "reference",
                "required": true,
                "repeats": false
              },
              {
                "code": [
                  {
                    "code": "399068003",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "initial": [
                  {
                    "valueCoding": {
                      "code": "FAMMEMB",
                      "system": "http://terminology.hl7.org/CodeSystem/v3-RoleCode"
                    }
                  }
                ],
                "linkId": "family-relationship",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateCancerFamilyHistory#FamilyMemberHistory.relationship.coding",
                "text": "Family relationship",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              }
            ],
            "linkId": "family-history-group",
            "definition": "https://flute.com/StructureDefinition/PR-ProstateCancerFamilyHistory#FamilyMemberHistory",
            "type": "group",
            "required": false
          },
          {
            "item": [
              {
                "code": [
                  {
                    "code": "2857-1",
                    "system": "http://loinc.org"
                  }
                ],
                "linkId": "psa",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateSpecificAntigen#Observation.value",
                "text": "Measure of prostate-specific antigen reported in ng/ml",
                "type": "quantity",
                "required": true,
                "repeats": false
              },
              {
                "initial": [
                  {
                    "valueCoding": {
                      "code": "2857-1",
                      "system": "http://loinc.org",
                      "display": "Prostate specific Ag"
                    }
                  }
                ],
                "linkId": "psa-code",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateSpecificAntigen#Observation.code.coding",
                "text": "PSA code",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "code": [
                  {
                    "code": "2857-1",
                    "system": "http://loinc.org"
                  }
                ],
                "initial": [
                  {
                    "valueCoding": {
                      "code": "final",
                      "system": "http://hl7.org/fhir/observation-status"
                    }
                  }
                ],
                "linkId": "psa-status",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateSpecificAntigen#Observation.status",
                "text": "PSA Status",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "linkId": "psa-subject",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateSpecificAntigen#Observation.subject",
                "text": "PSA subject",
                "type": "reference",
                "required": true,
                "repeats": false
              }
            ],
            "linkId": "observation-psa-group",
            "definition": "https://flute.com/StructureDefinition/PR-ProstateSpecificAntigen#Observation",
            "type": "group",
            "text": "Observation PSA group",
            "required": false
          },
          {
            "item": [
              {
                "code": [
                  {
                    "code": "410006001",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "linkId": "dre",
                "definition": "https://flute.com/StructureDefinition/PR-DigitalRectalExamination#Procedure.outcome.coding",
                "text": "Results of digital rectal examination",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true,
                "answerValueSet": "https://flute.com/fhir/ValueSet/VS-DREOutcomeCode"
              },
              {
                "initial": [
                  {
                    "valueCoding": {
                      "code": "410006001",
                      "system": "http://snomed.info/sct",
                      "display": "digital rectal examination"
                    }
                  }
                ],
                "linkId": "dre-code",
                "definition": "https://flute.com/StructureDefinition/PR-DigitalRectalExamination#Procedure.code.coding",
                "text": "DRE code",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "code": [
                  {
                    "code": "410006001",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "initial": [
                  {
                    "valueCoding": {
                      "code": "completed",
                      "system": "http://hl7.org/fhir/event-status"
                    }
                  }
                ],
                "linkId": "dre-status",
                "definition": "https://flute.com/StructureDefinition/PR-DigitalRectalExamination#Procedure.status",
                "text": "DRE Status",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "initial": [
                  {
                    "valueCoding": {
                      "code": "41216001",
                      "system": "http://snomed.info/sct",
                      "display": "Prostatic structure (body structure)"
                    }
                  }
                ],
                "linkId": "dre-bodySite",
                "definition": "https://flute.com/StructureDefinition/PR-DigitalRectalExamination#Procedure.bodySite.coding",
                "text": "DRE bodySite",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "linkId": "dre-subject",
                "definition": "https://flute.com/StructureDefinition/PR-DigitalRectalExamination#Procedure.subject",
                "text": "DRE subject",
                "type": "reference",
                "required": true,
                "repeats": false
              }
            ],
            "linkId": "procedure-dre-group",
            "definition": "https://flute.com/StructureDefinition/PR-DigitalRectalExamination#Procedure",
            "type": "group",
            "text": "Procedure DRE group",
            "required": false
          },
          {
            "item": [
              {
                "code": [
                  {
                    "code": "41216001",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "linkId": "prostate-volume",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateVolume#Observation.value",
                "text": "Prostate volume in cc",
                "type": "quantity",
                "required": true,
                "repeats": false
              },
              {
                "initial": [
                  {
                    "valueCoding": {
                      "code": "1297142007",
                      "system": "http://snomed.info/sct",
                      "display": "Volume of prostate"
                    }
                  }
                ],
                "linkId": "prostate-code",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateVolume#Observation.code.coding",
                "text": "Prostate volume code",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "code": [
                  {
                    "code": "41216001",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "initial": [
                  {
                    "valueCoding": {
                      "code": "final",
                      "system": "http://hl7.org/fhir/observation-status"
                    }
                  }
                ],
                "linkId": "prostate-status",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateVolume#Observation.status",
                "text": "Prostate volume Status",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "initial": [
                  {
                    "valueCoding": {
                      "code": "41216001",
                      "system": "http://snomed.info/sct",
                      "display": "Prostatic structure (body structure)"
                    }
                  }
                ],
                "linkId": "prostate-bodySite",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateVolume#Observation.bodySite.coding",
                "text": "Prostate volume bodySite",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "linkId": "prostate-subject",
                "definition": "https://flute.com/StructureDefinition/PR-ProstateVolume#Observation.subject",
                "text": "Prostate subject",
                "type": "reference",
                "required": true,
                "repeats": false
              }
            ],
            "linkId": "observation-prostate-volume-group",
            "definition": "https://flute.com/StructureDefinition/PR-ProstateVolume#Observation",
            "type": "group",
            "text": "Observation Prostate Volume group",
            "required": false
          },
          {
            "item": [
              {
                "code": [
                  {
                    "code": "719178004",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "answerOption": [
                  {
                    "valueInteger": 1
                  },
                  {
                    "valueInteger": 2
                  },
                  {
                    "valueInteger": 3
                  },
                  {
                    "valueInteger": 4
                  },
                  {
                    "valueInteger": 5
                  }
                ],
                "linkId": "pirads",
                "definition": "https://flute.com/StructureDefinition/PR-PIRADSScore#Observation.value",
                "text": "PI-RADS score",
                "type": "choice",
                "required": true,
                "repeats": false
              },
              {
                "initial": [
                  {
                    "valueCoding": {
                      "code": "719178004",
                      "system": "http://snomed.info/sct",
                      "display": "Multiparametric magnetic resonance imaging of prostate"
                    }
                  }
                ],
                "linkId": "pirads-code",
                "definition": "https://flute.com/StructureDefinition/PR-PIRADSScore#Observation.code.coding",
                "text": "PI-RADS code",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "code": [
                  {
                    "code": "719178004",
                    "system": "http://snomed.info/sct"
                  }
                ],
                "initial": [
                  {
                    "valueCoding": {
                      "code": "final",
                      "system": "http://hl7.org/fhir/observation-status"
                    }
                  }
                ],
                "linkId": "pirads-status",
                "definition": "https://flute.com/StructureDefinition/PR-PIRADSScore#Observation.status",
                "text": "PI-RADS Status",
                "type": "choice",
                "required": true,
                "repeats": false,
                "readOnly": true
              },
              {
                "linkId": "pirads-subject",
                "definition": "https://flute.com/StructureDefinition/PR-PIRADSScore#Observation.subject",
                "text": "PI-RADS subject",
                "type": "reference",
                "required": true,
                "repeats": false
              }
            ],
            "linkId": "observation-pirads-group",
            "definition": "https://flute.com/StructureDefinition/PR-PIRADSScore#Observation",
            "type": "group",
            "text": "Observation PI-RADS group",
            "required": false
          }
        ],
        "version": "1.0.0",
        "name": "StudyVariableExtraction",
        "title": "Study variable Extraction",
        "status": "active",
        "experimental": true,
        "date": "2024-03-26",
        "description": "Study variable extractable questionnaire"
      }
    }
  ]
}"
      }
    }
  ],
  "status": "current"
}
